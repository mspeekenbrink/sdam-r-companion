[
["index.html", "An R companion to Statistics: data analysis and modelling Preface 0.1 Acknowledgements", " An R companion to Statistics: data analysis and modelling Maarten Speekenbrink 2020-10-01 Preface This is a companion to the book “Statistics: Data analysis and modelling”. It covers R is a programming language and environment specifically designed for data analysis. It is flexible, relatively fast, and has a large number of users and contributors. However, R is known to have a somewhat steep learning curve, so if you want to learn R, you will have to put in some extra effort (compared to e.g. JASP or SPSS). This effort will certainly pay off in the end, but it is up to you to decide whether you want to make this investment. This companion is meant to show you how to use R to do the types of analyses covered in “Statistics: Data analysis and modelling”. It is certainly not meant as a complete course on R. There are lots of good resources on R available on the internet and I suggest that, if you are serious about learning R, you also look elsewhere. Some sources you might find useful are: Beginner’s guide to R (Computer World) Interactive introduction to R programming (DataCamp) Try R (another interactive tutorial by codeschool) A freely downloadable book on R and statistics specifically focused on psychology students (especially part II and III are relevant): Learning statistics with R (Danielle Navarro) 0.1 Acknowledgements Parts of these notes were adapted from other sources (if there is a licence allowing that). I acknowledge these sources in footnotes. # automatically create a bib database for R packages knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39; ), &#39;packages.bib&#39;) "],
["introduction.html", "Chapter 1 Introduction 1.1 What is R?1 1.2 Getting started 1.3 Working with RStudio 1.4 Installing packages 1.5 Getting help 1.6 First steps: R as a calculator 1.7 Data 1.8 Exploring data: Descriptive statistics 1.9 Exploring data: Creating plots 1.10 Scatterplot 1.11 Raincloud plot", " Chapter 1 Introduction 1.1 What is R?1 R is a statistical programming language that has rapidly gained popularity in many scientific fields. It was developed by Ross Ihaka and Robert Gentleman as an open source implementation of the “S” programming language. (Next time you need a fun fact, you can say “Did you know that S came before R?”) R is also the name of the software that uses this language for statistical computing. With a huge online support community and dedicated packages that provide extra functionality for virtually any application and field of study, there’s hardly anything you can’t do in R. If you already know your way around statistical software like JASP or SPSS, the main difference is that R has no graphical user interface, which means there are no buttons to click and no dropdown menus. R can be run entirely by typing commands into a text interface (welcome to the Matrix!). This may seem a little daunting, but it also means a whole lot more flexibility, as you are not relying on a pre-determined toolkit for your analyses. If you need any more convincing, why are we using R and not one of the many other statistical packages like JASP, SPSS, MATLAB, Minitab, or even Microsoft Excel? Well, R is great because: R is free and open source, and always will be! Anybody can use the code and see exactly how it works. Because R is a programming language rather than a graphical interface, the user can easily save scripts as small text files for use in the future, or share them with collaborators. R has a very active and helpful online community - normally a quick search is all it takes to find that somebody has already solved the problem you’re having. 1.2 Getting started 1.2.1 Download R You can download R from CRAN (The Comprehensive R Archive Network). Select the link appropriate for your operating system. As you can see, the CRAN website has a rather distinctive “old-school” look. Don’t let that fool you though. R itself is anything but old school. 1.2.2 Download R Studio R does not come with a graphical interface by default. Most people nowadays interact with R through second-party graphical platforms that provide extra functionality. Probably the most popular graphical front-end to R is RStudio. This is actually a full “integrated development environment” (IDE), but mostly, we will use it as a place where we can keep scripts, plots, and R output together in one place. Like R, RStudio is open source software and free to download for anyone that wants to. You can download RStudio from the RStudio website (select the free open source desktop version). 1.3 Working with RStudio When you open RStudio, you will see something like Figure 1.1. You will probably not see exactly the same layout, but once you click on File in the top menu, and then New File &gt; R Script, you should be pretty close. You can get direct access to the R environment itself in the console panel. If you type in commands here, they will be interpreted by R, and possibly some output is given. Working directly within the R console is handy if you want to do simple calculations, or try out different commands and functions. When you are conducting analyses, you will want to keep the commands that produce useful results somewhere, so you don’t have to type in everything again if you want to rerun the analyses, or if you need to change something. That is where R scripts come in handy. Basically, these are text files where you store a collection of commands that can be interpreted by R. Within RStudio, you can select lines of the script, and by clicking on Run, those lines will get pasted to the R console. Figure 1.1: The RStudio interface consists of four main panels. The source panel (top left) is where you can keep scripts. The console panel (bottom left) is where the R commands and text output go; this is where R truly lives. The environment and history panel (top right) shows which R objects are currently available in memory and a history of all the R commands the R console received. The files, plots, packages, etc panel contains a file browser, a display panel for all plots, a list of installed R packages, and a browser for help files. Another useful way to store R commands is in a different file format, called RMarkdown. Rmarkdown allows you to combine text, plots, and R commands all in a single file. This file can then be “parsed” to produce a variety of document formats, such as HTML, pdf, and even Microsoft Word. If you click on File &gt; New File &gt; R Markdown, you can see an example of such a file. Using a package like bookdown, you can even write whole books in R Markdown (like this one)! We will discuss R Markdown more at a later point. 1.4 Installing packages Part of the popularity of R stems from the thousands of packages that extent the basic capabilities of R. 1.4.1 Installing the sdam-r package The “Statistics: Data analysis and modelling” book has an associated R package which contains the data sets used as examples in the book, as well as some additional functions. As it is still in development as I’m writing, it is not hosted on CRAN yet. That doesn’t mean you can’t install the package, but it requires a tiny bit more work. The source code of the sdamr package is hosted in GitHub, and the package can be installed from there with help of the remotes package. So you will first need to install that package, and then you can use the install_github function to install the sdamr package: install.packages(&quot;remotes&quot;) remotes::install_github(&quot;mspeekenbrink/sdam-r&quot;) Note that by typing remotes:: before the function call, we are telling R that the function is available in the remotes package. This avoids you having to load the package (i.e. by library(remotes)) first. To check whether the package is installed, type library(sdamr) 1.5 Getting help R may be tricky to master, especially at the start, but help is never far away: From within R If you want more information on a specific function, use a question mark before it (e.g., ?plot) or the help function (e.g., help(plot)) If you don’t know the function name, use two question marks (e.g., ??plot) or the help.search function (e.g., help.search(\"plot\")) If you know a function is in a package, use search help on the package (e.g., ?ggplot2) The RSiteSearch(\"keyword\") function will will search for “keyword” in all functions available in R, associated packages, and the R-Help News groups (if desired). Online Stack Overflow is a platform in which you can ask questions about R and its many packages. Many questions will already have been asked, so its archive of questions and answers is particularly useful. The meta-search engine at www.rseek.org may also be handy. R has an active help mailing list as well, but when asking questions there, make sure you read the posting guide, as some people on there sometimes get a little grumpy. 1.6 First steps: R as a calculator R can be used as a console-based calculator. Here are some examples. 2 + 11 # addition ## [1] 13 2 * 11 # multiplication ## [1] 22 2 / 11 # division ## [1] 0.182 2^(11) # exponentiation ## [1] 2048 sqrt(2) # square root ## [1] 1.41 2^(1/2) # another way to compute the square root ## [1] 1.41 # the order matters! 2 + 11*3 ## [1] 35 (2 + 11)*3 # R follows the usual rules of arithmetic ## [1] 39 Note that the hash symbol (“#”) is used for comments, such that anything following a “#” is not evaluated. 1.7 Data You can load in data files that come with R packages by using the data function, with as argument the name of the dataset you want to load (as a string, so make sure you use quote signs). For instance, you can load the datset fifa2010teams from the sdamr package as follows: library(sdamr) data(&quot;fifa2010teams&quot;) A loaded dataset will show up in the Environment panel in RStudio. If you click on the name of the dataset, you can then see the data as a table in the Source panel. You can also view the data in the R console by simply typing the name of the dataset. This will often produce a lot of output. If you just want to view a part of the dataset, you can use the head function, which will show the first 6 rows: head(fifa2010teams) ## nr team matches_played goals_for goals_scored goals_against ## 1 1 Germany 7 16 16 5 ## 2 2 Netherlands 7 12 11 6 ## 3 3 Uruguay 7 11 11 8 ## 4 4 Argentina 5 10 9 6 ## 5 5 Brazil 5 9 9 4 ## 6 6 Spain 7 8 8 2 ## penalty_goal own_goals_for yellow_cards indirect_red_cards direct_red_cards ## 1 0 0 13 0 0 ## 2 0 0 24 0 0 ## 3 1 0 11 0 1 ## 4 0 0 7 0 0 ## 5 0 0 9 0 1 ## 6 0 0 8 0 0 You can also get a quick summary of the characteristics of the variables in the data through the summary function: summary(fifa2010teams) ## nr team matches_played goals_for ## Min. : 1.0 Length:32 Min. :3.00 Min. : 0.00 ## 1st Qu.: 8.8 Class :character 1st Qu.:3.00 1st Qu.: 2.00 ## Median :16.5 Mode :character Median :3.50 Median : 3.00 ## Mean :16.5 Mean :4.00 Mean : 4.53 ## 3rd Qu.:24.2 3rd Qu.:4.25 3rd Qu.: 5.25 ## Max. :32.0 Max. :7.00 Max. :16.00 ## goals_scored goals_against penalty_goal own_goals_for yellow_cards ## Min. : 0.00 Min. : 1.00 Min. :0.000 Min. :0 Min. : 2.00 ## 1st Qu.: 2.00 1st Qu.: 3.00 1st Qu.:0.000 1st Qu.:0 1st Qu.: 6.00 ## Median : 3.00 Median : 5.00 Median :0.000 Median :0 Median : 7.50 ## Mean : 4.47 Mean : 4.53 Mean :0.281 Mean :0 Mean : 8.16 ## 3rd Qu.: 5.25 3rd Qu.: 5.25 3rd Qu.:0.250 3rd Qu.:0 3rd Qu.: 9.00 ## Max. :16.00 Max. :12.00 Max. :2.000 Max. :0 Max. :24.00 ## indirect_red_cards direct_red_cards ## Min. :0 Min. :0.000 ## 1st Qu.:0 1st Qu.:0.000 ## Median :0 Median :0.000 ## Mean :0 Mean :0.281 ## 3rd Qu.:0 3rd Qu.:0.250 ## Max. :0 Max. :2.000 1.7.1 Data types Data in R is generally stored in vectors, which are fixed-length collections of values of a particular data type. Common data types are logical: values which can either be TRUE or FALSE numeric: numbers of all kinds, such as 1, 356, and 34.5782 character: characters and strings, such as q and Hello You can combine values of a data type in a vector by using the c() function (which stands for “combine”). For instance c(TRUE, FALSE, TRUE, TRUE) ## [1] TRUE FALSE TRUE TRUE c(3,4,802.376) ## [1] 3 4 802 c(&quot;Coffee&quot;,&quot;now&quot;,&quot;please&quot;) ## [1] &quot;Coffee&quot; &quot;now&quot; &quot;please&quot; If you combine elements of different data types, then R will convert them to the most “general” type necessary. Combining a logical value with a numeric one, for instance, will convert logical value TRUE to 1, and FALSE to 0. Combining a character element with other elements, will convert everything to character elements: c(TRUE, FALSE, 12) ## [1] 1 0 12 c(TRUE, 5.67788, &quot;let&#39;s see what happens&quot;) ## [1] &quot;TRUE&quot; &quot;5.67788&quot; &quot;let&#39;s see what happens&quot; 1.7.2 Objects A matrix is a collection of vectors of the same length, joined as columns or rows. mat &lt;- matrix(1:10,ncol=2) mat # matrices are filled column-wise ## [,1] [,2] ## [1,] 1 6 ## [2,] 2 7 ## [3,] 3 8 ## [4,] 4 9 ## [5,] 5 10 mat[,2] # select the second columns ## [1] 6 7 8 9 10 mat[3,1] # select the value in the third row and first column ## [1] 3 A factor is useful for nominal and ordinal data. A factor is a vector with integers, where each integer is provided with a unique label. For instance # construct a factor by giving integer values and specifying the accompanying # labels fact &lt;- factor(c(1,2,2,3),labels=c(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;)) fact # display it ## [1] red green green blue ## Levels: red green blue fact == &quot;green&quot; # determine which elements equal (==) &#39;green&#39; ## [1] FALSE TRUE TRUE FALSE A list is a collection of different R objects. This is a very general type of object, and the elements of a list can even by lists themselves. A data.frame is probably one of the most useful features of R for data analysis. A data.frame is like a matrix, in that it is a rectangular collection of data, but the columns are variables which can be of a different type (e.g., numeric, factors, or characters). 1.7.3 Importing data R can load data in many formats. Personally, I mainly use data stored in “comma separated value” (CSV) format. This is one of the most portable ways of storing data, so that it can be used in a variety of programs like R, SPSS, JASP, Excel, etc. Data in a comma-separated value (CSV) format can be read through the read.csv function. A nice thing about R is that it can read data directly from the World Wide Web. So you don’t need to first download data, and then open it from within R. [TODO: example] At some point, you will probably also come across data stored in Excel or SPSS format. regarding Excel, it is safest to first save a spreadsheet as a CSV file, and then load this file into R. Alternatively, the xlsx package provides the function read.xlsx to directly read a spreadsheet into R. To load data in SPSS format, the package foreign package provides the read.spss function. 1.8 Exploring data: Descriptive statistics Measures of location and spread can be computed through specialized functions, namely mean, median, var (variance), sd (standard deviation), e.g. mean(fifa2010teams$goals_for) ## [1] 4.53 median(fifa2010teams$goals_for) ## [1] 3 will give you the mean and median of variable goals_for in data.frame fifa2010teams. The var and sd function do not actually provide the sample variance_ and sample standard deviation. Rather, they give unbiased estimates of the “true” (population) variance and standard deviation. To compute the variance and standard deviation of the sample data, you can use the sample_var and sample_sd functions in the sdamr package: sample_var(fifa2010teams$goals_for) ## [1] 13.2 sample_sd(fifa2010teams$goals_for) ## [1] 3.64 There is no function in base R to compute the mode2, but the sdamr package provides the function sample_mode to do just that: sample_mode(fifa2010teams$goals_for) ## [1] 3 1.9 Exploring data: Creating plots There are two common ways to plot data with R. Base R has various plotting functions, such as plot, hist, boxplot, which are useful for quick plots to explore your data. The resulting plots are not always the most aesthetically pleasing. The R package ggplot2 provides means to create a wide range of useful and beautiful plots. It is based on the idea of a “grammar of graphics”, which makes it extremely flexible, but also a little difficult to get your head around. In the following, I will show you how to use both base R and ggplot2. 1.9.1 Histogram R has many built-in plotting functions. These tend to be a little basic, and much prettier plots can be made with packages such as ggplot2 (my current favourite!). But for quick data exploration, the built-in plotting functions are faster. A histogram is plotted through the hist function. In the following example, I first generate some random data, store it in an object called dat and then plot a histogram: hist(fifa2010teams$goals_for) There are many parameters you can change. In the following, I give the plot a new title and x-axis labels, as well as request the number of bins to be 20: hist(fifa2010teams$goals_for,main=&quot;Histogram of points scored by teams in the FIFA 2010 World Cup&quot;, xlab=&quot;Goals for&quot;, breaks=20) To create a nicer looking plot, you can use ggplot2. library(ggplot2) ggplot(fifa2010teams,aes(x=goals_for)) + geom_histogram() Well, that’s not actually so pretty. We can make it better by changing some of the defaults: library(ggplot2) ggplot(fifa2010teams,aes(x=goals_for)) + geom_histogram(bins=10, colour=&quot;black&quot;, fill=&#39;#8C8279&#39;) + xlab(&quot;Goals scored&quot;) Note that within the geom_histogram function, I’ve specified to use 10 bins, and draw a black line around the bars, and fill the bars with colour specified by the hexadecimal colour code ‘#8C8279’. Finally,, I’m using the xlab function to generate a better label for the x-axis. ggplot2 is very powerful and flexible, so there are many such adjustments you can make. 1.9.2 Boxplot For a quick boxplot, you can use the base R function with the same name: boxplot(fifa2010teams$goals_for) ggplot2 also provides a boxplot through the geom_boxplot function. Note that in the aes specification, I’m now using goals_for as the y-axis. ggplot(fifa2010teams,aes(y=goals_for)) + geom_boxplot() Not very pretty! A somewhat better version can be obtained by: ggplot(fifa2010teams,aes(x=&quot;&quot;,y=goals_for)) + geom_boxplot(width=.2) + xlab(&quot;&quot;) 1.10 Scatterplot 1.11 Raincloud plot set.seed(467) plot_raincloud(fifa2010teams, goals_for) This section contains material adapted from https://ourcodingclub.github.io/tutorials/intro-to-r/↩︎ There is a function mode, but this does something rather different!↩︎ "],
["statistical-modelling.html", "Chapter 2 Statistical modelling 2.1 Distributions 2.2 Estimation 2.3 Hypothesis testing", " Chapter 2 Statistical modelling 2.1 Distributions 2.1.1 Generating random data rbinom(n=100, size=8, prob=0.5) ## [1] 3 1 4 7 6 3 3 2 5 3 3 4 6 3 2 6 4 4 4 6 4 3 5 4 6 5 2 4 7 4 5 6 4 3 4 4 6 ## [38] 6 6 5 5 4 5 5 5 2 4 3 4 4 3 3 5 5 6 4 2 3 5 5 5 7 5 5 2 6 4 3 1 3 5 5 3 3 ## [75] 3 3 2 3 4 6 6 3 5 5 5 3 6 3 5 2 2 4 5 4 4 4 2 3 5 4 2.2 Estimation 2.2.1 Calculating likelihood 2.3 Hypothesis testing binom.test(x=8, n = 8, p = 0.5) ## ## Exact binomial test ## ## data: 8 and 8 ## number of successes = 8, number of trials = 8, p-value = 0.008 ## alternative hypothesis: true probability of success is not equal to 0.5 ## 95 percent confidence interval: ## 0.631 1.000 ## sample estimates: ## probability of success ## 1 binom.test(x=8, n = 8, p = 0.5, alternative = &quot;greater&quot;) ## ## Exact binomial test ## ## data: 8 and 8 ## number of successes = 8, number of trials = 8, p-value = 0.004 ## alternative hypothesis: true probability of success is greater than 0.5 ## 95 percent confidence interval: ## 0.688 1.000 ## sample estimates: ## probability of success ## 1 2.3.1 Calculating the likelihood ratio "]
]
